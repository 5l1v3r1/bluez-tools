                                   bttools project
------------------------------------------------------------------------------------------
Abstract:
	Sometimes we need to work with bluetooth devices without having a X server. Also, 
many peoples prefer to perform most operations in the console, even from a full DE. The 
idea of this project - write a set of console utilities to work with the bluetooth devices. 
The main advantage - X server is not needed, no bindings to the DE/WM. The main goal - to 
implement the maximum functionality for a simple and easy work with the devices.
------------------------------------------------------------------------------------------

Base set of utilities:
-----------------------
 - bttool-agent
 - bttool-monitor
 - bttool-utility

----------------------------------------------
1) bttool-agent (btagent/btagentlib)
Bluetooth agent/agentlib, to manage incoming and outgoing requests and connections;

Tasks:
 - request pincode/passkey for an authentication from user (bluetooth v2.0)
 - display passkey to user (bluetooth v2.1 only)
 - request confirmation from user, that a passkey for an authentication is valid (bluetooth v2.1 only)
 - authorize a connection/service request
 - cancel request if request failed/reply was not returned
 - confirm mode change of adapter
 - register/unregister self for an selected adapter

btagent is an external tool, that manage incoming connections.
command line arguments:
./btagent [help|--help|-h] [adapter#id]
 adapter#id  -  register agent for an given adapter
 help        -  show help and exit

If no adapter#id is given, than agent register self to a default adapter;
Agentlib is used as embedded agent to manage outgoing connections in bttool-utility;

----------------------------------------------
2) bttool-monitor (btmon)
Bluetooth monitor, that displays some events (and possible - an errors);

Tasks (events to display):
 Adaper events:
  - adapter added/removed (GLOBAL)
  - default adapter changed (GLOBAL)
  - adapter property changed
 Device events:
  - device added/removed (ie created/removed)
  - device property changed
  - disconnection to a remote device has been requested
 Input service events:
  - input device connected/disconnected
 Network service events:
  - network device connected/disconnected (also displays interface name)
 Audio service events (generic):
  - audio device connected/disconnected/connection state changed

command line arguments:
./btmon [help|--help|-h] [adapter#id]
 adapter#id  -  show events only for an given adapter
 help        -  show help and exit

If no adapter#id is given, that display events from all adapters and devices;
GLOBAL events are displayed for all;

Also, monitor can listen for an error messages from bttool-agent/bttool-utility and display they;

----------------------------------------------
3) bttool-utility (bttool)
Main bluetooth tool to manage devices and services;

Tasks:
 Adapter managment:
  - list all available adapters
  - get/set properties
  - discover remote devices
 Device managment:
  - list of added devices
  - add remote device and initiate pairing
  - remove device
  - get/set properties
  - discover services
  - disconnect from device
 Services managment:
  - list connected services
  - connect/disconnect to/from an input device
  - connect/disconnect to/from a serial device
  - connect/disconnect to/from a network device
  - connect/disconnect to/from an audio device

command line arguments:
./bttool [help|--help|-h] [list|--list|-l] [ [adapter#id] commands [params] ]
  help        -  show help and exit
  list        -  list all available adapters
  
  [adapter#id] ...  (use an given adapter or default if does not defined)
   Adapter commands:
    prop[erties] [name] [value]  -  list/get/set property(es)
    disc[over]                   -  discover available remote devices
    
    dev[ice] addr|name? ...
     Device commands:
      list                         -  list of added devices
      conn[ect]                    -  add remote device and initiate pairing
      rem[ove]                     -  remove device
      discon[nect]                 -  disconnect from device
      prop[erties] [name] [value]  -  list/get/set property(es)
      disc[over]                   -  discover services
      
      serv[ice] ...
       Services comands:
        list                           -  list connected services
        disc[over]                     -  discover services (alias)
        in[put] conn[ect]|discon[ect]  -  connect/disconnect to/from an input device
        ser[ial] ...
         conn[ect] uuid|profile|channel  -  connect to a serial device
         discon[nect] device             -  disconnect from a serial device
        net[work] ...
         conn[ect] gn|panu|nap           - connect to a network device
         discon[nect]                    - disconnect from a network device
        au[dio] conn[ect]|discon[ect]  -  connect/disconnect to/from an audio device

If no options are given - show help page;

This utility will support full and short syntax.

Examples of usage:
 a) Discover remote devices
 ./bttool disc     (short)
 ./bttool discover (full)

 b) Connect to a remote device and initiate pairing
 ./bttool dev xx:xx:xx:xx:xx:xx conn    (short)
 ./bttool device xx:xx:xx:xx:xx connect (full)

 c) Discover remote services
 ./bttool dev xx:xx:xx:xx:xx:xx disc        (short)
 ./bttool device xx:xx:xx:xx:xx:xx discover (full)
  OR
 ./bttool dev xx:xx:xx:xx:xx:xx serv disc           (short)
 ./bttool device xx:xx:xx:xx:xx:xx service(s) discover (full)

 d) Connect to an input device
 ./bttool dev xx:xx:xx:xx:xx:xx serv in conn             (short)
 ./bttool device xx:xx:xx:xx:xx:xx service input connect (full)

 e) Change adapter mode/properties
 ./bttool prop Discoverable off       (short)
 ./bttool prop DiscoverableTimeout 1h (short)
 ./bttool property Discoverable off   (full)

 f) List added devices
 ./bttool dev list       (short)
 ./bttool device(s) list (full)

 g) List all connected services
 ./bttool dev xx:xx:xx:xx:xx:xx serv list          (short)
 ./bttool device xx:xx:xx:xx:xx:xx service(s) list (full)

---------
*  adapter#id also can be: hci0, 0, 00:11:22:33:44:55, ?MyCoolAdapter?
** device xx:xx:xx:xx:xx:xx can be: 11:22:33:44:55:66, ?CoolRemoteDevice?

IMPORTANT: This is a base document (ie demo), all other features, such as OBEX support, bash-completion, etc 
           will be described later. 
